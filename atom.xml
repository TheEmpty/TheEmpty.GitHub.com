<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Empty Thoughts]]></title>
  <link href="http://mohammad.el-abid.com//atom.xml" rel="self"/>
  <link href="http://mohammad.el-abid.com//"/>
  <updated>2012-08-24T05:51:52-04:00</updated>
  <id>http://mohammad.el-abid.com//</id>
  <author>
    <name><![CDATA[Mohammad El-Abid]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[C Beauty In Everything (Part 1)]]></title>
    <link href="http://mohammad.el-abid.com//blog/2012/08/24/c-beauty-in-everything-part-1/"/>
    <updated>2012-08-24T12:00:00-04:00</updated>
    <id>http://mohammad.el-abid.com//blog/2012/08/24/c-beauty-in-everything-part-1</id>
    <content type="html"><![CDATA[<p>The other day someone was saying how they didn&#8217;t quite like Objective-C. They went on to say how it was weird that the <code>@</code> in front of strings made it harder to read. When I explained that this was to separate character arrays from <code>NSStrings</code> he was curious to why there were,</p>

<blockquote><p>Ok, so what the fuck do you need two types of strings for? NSStrings? C-Style strings? Isn&#8217;t a string&#8230;a string? Like&#8230;every other language I&#8217;ve seen only uses one type.</p><footer><strong>TheMaster</strong> <cite><a href='http://webdevrefinery.com/forums/topic/11869-php-a-fractal-of-bad-design/page__view__findpost__p__128102'>wdR Post</a></cite></footer></blockquote>


<!-- more -->


<p>In response to his post, I created and <a href="http://webdevrefinery.com/forums/topic/11869-php-a-fractal-of-bad-design/page__view__findpost__p__128118">posted</a> my first C program. I had worked with C++ before, so it wasn&#8217;t too foreign. I was surprised at how easy it was to write low-level code! Perhaps it was just easy because I&#8217;m used to hearing C keywords and issues, but I found that I had the knowledge to write C without issue! So I decided to try something harder. Something most programmers do in an intro course, but one that I have yet to do. A tic-tack-toe program.</p>

<p>And this is in no way a bash toward &#8220;TheMaster&#8221; who I quoted above. I just though it was good to give the pretense to this article. With the pretense being that we&#8217;re getting most coders started on super high-level languages, but not teaching them what is really happening. Hopefully this tutorial will get people more interested in C and family. If this blog takes off I would love to team up with some artist and get into writing some games in C++, not something I can really do without graphics!</p>

<h2>Pre-Thanks</h2>

<p>Before you read, I want to thank you for taking the time to read this. It&#8217;s been awhile since I&#8217;ve written technical tutorials, so please feel free to leave a comment or email me via mohammad {att} el-abid.com with comments or suggestions.</p>

<h2>A Few Assumptions Before You Read</h2>

<p>I assume that you&#8217;re comfortable with C-style syntax. If you&#8217;ve coded in Java, JavaScript, or variants of C, you should be able to pick the syntax up quickly.</p>

<h2>Getting a Compiler</h2>

<h3>Windows</h3>

<p>For windows users, you can checkout <a href="http://netbeans.org/features/cpp/">NetBeans</a>, <a href="http://www.codeblocks.org/">Code::Blocks</a>, or MicrosoftÂ®&#8217;s <a href="http://www.microsoft.com/visualstudio/11/en-us/products/express">visual studio</a>.</p>

<h3>Linux</h3>

<p>For linux, I use <a href="http://gcc.gnu.org/">gcc</a> which you should be able to install using your operating system&#8217;s package management or download the source from their site and build it yourself.</p>

<h3>Mac</h3>

<p>After you install <a href="https://developer.apple.com/xcode/">XCode 4.0</a> you can follow <a href="http://www.youtube.com/watch?v=7f6QIInt1M8">this YouTube video</a>.</p>

<h1>Let&#8217;s C About Tic-Tac-Toe</h1>

<h2>Creating the Gameboard</h2>

<p>We&#8217;ll start by creating a 2D array. This is fairly straight forward since we know the width and height of the array. I consider the first array vertical and the array inside of that array as horizontal. If you have trouble understanding 2D arrays, but know what a hash is, think of it like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">row0</span><span class="p">:</span> <span class="o">[</span><span class="n">blank</span><span class="p">,</span> <span class="n">blank</span><span class="p">,</span> <span class="n">blank</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>  <span class="n">row1</span><span class="p">:</span> <span class="o">[</span><span class="n">blank</span><span class="p">,</span> <span class="n">blank</span><span class="p">,</span> <span class="n">blank</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>  <span class="n">row2</span><span class="p">:</span> <span class="o">[</span><span class="n">blank</span><span class="p">,</span> <span class="n">blank</span><span class="p">,</span> <span class="n">blank</span><span class="o">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So as I was saying, we know the size of board so we can have the compiler allocate the memory for the array. But I&#8217;ll be posting a follow up post soon about storing a 2D array of any size using <code>malloc</code>, <code>free</code>, and <code>char**</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &lt;stdlib.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">char</span> <span class="n">board</span><span class="p">[</span><span class="mi">3</span><span class="p">][</span><span class="mi">3</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">cleanBoard</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>            <span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>That was pretty easy for a low level language right? The <code>cleanBoard()</code> method is not even necessary at this point, but I currently don&#8217;t trust default values in C, something I hope to talk about in the follow up post mentioned above. With that said, lets work on visualizing this array as a tic-tac-toe board!</p>

<h2>Displaying the Array</h2>

<p>If you don&#8217;t have <code>#import &lt;stdio.h&gt;</code> in your file, be sure to add it now as we&#8217;ll be using <code>print</code> and <code>printf</code> (print (with) <strong>f</strong>ormat). Here is an example of the format that I want to use to display the board:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">X</span> <span class="o">|</span> <span class="mi">2</span> <span class="o">|</span> <span class="mi">3</span>
</span><span class='line'><span class="o">--+---+--</span>
</span><span class='line'><span class="mi">4</span> <span class="o">|</span> <span class="n">X</span> <span class="o">|</span> <span class="mi">6</span>
</span><span class='line'><span class="o">--+---+--</span>
</span><span class='line'><span class="mi">7</span> <span class="o">|</span> <span class="mi">8</span> <span class="o">|</span> <span class="n">X</span>
</span></code></pre></td></tr></table></div></figure>


<p>Though feel free to make yours more fancy if you wish. Well, first things first. We need to define what marks an &#8216;X&#8217;, an &#8216;O&#8217;, or a blank spot. So at the top of my file I added:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#define BLANK 0</span>
</span><span class='line'><span class="cp">#define X 3</span>
</span><span class='line'><span class="cp">#define O 5</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now also modify your <code>cleanBoard()</code> to set the elements to <code>BLANK</code> and not <code>0</code> in case you decide to change it. Now lets get cracking on this method. First we&#8217;ll modify the board so we can see that <code>displayBoard()</code> shows Xs and Os as well as the numbers.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">cleanBoard</span><span class="p">();</span>
</span><span class='line'>  <span class="n">board</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">X</span><span class="p">;</span> <span class="c1">// top left</span>
</span><span class='line'>  <span class="n">board</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">O</span><span class="p">;</span> <span class="c1">// center</span>
</span><span class='line'>  <span class="n">board</span><span class="p">[</span><span class="mi">2</span><span class="p">][</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="n">X</span><span class="p">;</span> <span class="c1">// bottom right</span>
</span><span class='line'>  <span class="n">displayBoard</span><span class="p">();</span> <span class="c1">// we&#39;ll develop this next</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">void</span> <span class="nf">displayBoard</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="c1">// loop over the rows</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="c1">// this is the &quot;x | y | z&quot; format</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%c | %c | %c</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">markerFor</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="n">markerFor</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="n">markerFor</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="mi">2</span><span class="p">));</span>
</span><span class='line'>    <span class="c1">// if we&#39;re not in the last row, output a border</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">i</span> <span class="o">!=</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;--+---+--</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">char</span> <span class="nf">markerFor</span><span class="p">(</span><span class="kt">char</span> <span class="n">x</span><span class="p">,</span> <span class="kt">char</span> <span class="n">y</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// load the current &#39;mark&#39; (X, O, BLANK) of this position</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">mark</span> <span class="o">=</span> <span class="n">board</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// if it is X or O, return with their character.</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">mark</span> <span class="o">==</span> <span class="n">X</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="sc">&#39;X&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">mark</span> <span class="o">==</span> <span class="n">O</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="sc">&#39;O&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="c1">// if it isn&#39;t X or O, we need to find out the</span>
</span><span class='line'>    <span class="c1">// numerical value of this position.</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// We now that each row holds 3 and that x starts</span>
</span><span class='line'>    <span class="c1">// at zero, so for the first row x * 3 = 0 and</span>
</span><span class='line'>    <span class="c1">// the 2nd row x * 3 = 3.</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// The y is just an offset within that X, so the</span>
</span><span class='line'>    <span class="c1">// middle spot (5) is in the second row (x * 3) = 3</span>
</span><span class='line'>    <span class="c1">// and in the second spot, which in an array index</span>
</span><span class='line'>    <span class="c1">// is only 1, so we end up with four. Since we want</span>
</span><span class='line'>    <span class="c1">// to count up from one instead of zero, we add one.</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">char</span> <span class="n">num</span> <span class="o">=</span> <span class="p">(</span><span class="n">x</span> <span class="o">*</span> <span class="mi">3</span><span class="p">)</span> <span class="o">+</span> <span class="n">y</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Because we want to display this character, we have</span>
</span><span class='line'>    <span class="c1">// to return it&#39;s position in the ASCII table. Since</span>
</span><span class='line'>    <span class="c1">// all chars are numbers (index in ASCII table) and</span>
</span><span class='line'>    <span class="c1">// numbers 0-9 are ASCII (but 10 is not, it&#39;s 1 and 0)</span>
</span><span class='line'>    <span class="c1">// and sequential in the table, we can just add to the</span>
</span><span class='line'>    <span class="c1">// value of &#39;0&#39; or add it to &#39;1&#39; and drop the +1 above. </span>
</span><span class='line'>    <span class="k">return</span> <span class="sc">&#39;0&#39;</span> <span class="o">+</span> <span class="n">num</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The reason I did the code in several different &#8220;blocks&#8221; above is because: 1) this is the order in which I would develop them because, 2) it is the order in which they are executed. However, in order to use a method in C, it either has to be declared or defined before any attempt at usage. Since we&#8217;re keeping thing simple, we&#8217;ll just define them before they&#8217;re used. Your file should look something like this now, with the ellipses representing code.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define BLANK 0</span>
</span><span class='line'><span class="cp">#define X 3</span>
</span><span class='line'><span class="cp">#define O 5</span>
</span><span class='line'>
</span><span class='line'><span class="kt">char</span> <span class="n">board</span><span class="p">[</span><span class="mi">3</span><span class="p">][</span><span class="mi">3</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">cleanBoard</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// â¦</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">char</span> <span class="nf">markerFor</span><span class="p">(</span><span class="kt">char</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// â¦</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">displayBoard</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// â¦</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">cleanBoard</span><span class="p">();</span>
</span><span class='line'>  <span class="n">board</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">X</span><span class="p">;</span> <span class="c1">// top left</span>
</span><span class='line'>  <span class="n">board</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">O</span><span class="p">;</span> <span class="c1">// center</span>
</span><span class='line'>  <span class="n">board</span><span class="p">[</span><span class="mi">2</span><span class="p">][</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="n">X</span><span class="p">;</span> <span class="c1">// bottom right</span>
</span><span class='line'>  <span class="n">displayBoard</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And when you build and run the application you should get the following. Once you confirmed that, lets get started with the user input!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">X</span> <span class="o">|</span> <span class="mi">2</span> <span class="o">|</span> <span class="mi">3</span>
</span><span class='line'><span class="o">--+---+--</span>
</span><span class='line'><span class="mi">4</span> <span class="o">|</span> <span class="n">O</span> <span class="o">|</span> <span class="mi">6</span>
</span><span class='line'><span class="o">--+---+--</span>
</span><span class='line'><span class="mi">7</span> <span class="o">|</span> <span class="mi">8</span> <span class="o">|</span> <span class="n">X</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Let the User Tell the Story</h2>

<p>Now we need to get some input from the user. We&#8217;ll use a built-in C function <code>getchar()</code>. We do run into a small issue with this function though. If a user inputs <code>123\n</code> we would assume they pressed <code>1</code>, continue and then the next time we use <code>getchar()</code> we would get <code>2</code>! So we need to make sure we clear that &#8220;buffer&#8221;. Thankfully this isn&#8217;t difficult since we can just loop until <code>getchar()</code> is <code>\n</code> since <code>1\n</code> would still product the <code>\n</code>.</p>

<p>Another issue that might strike you as odd is that C doesn&#8217;t have a boolean type. It uses <code>1</code> in place of <code>true</code> and <code>0</code> in place of <code>false</code>. And by in place, I don&#8217;t mean instead of since languages that use <code>true</code> and <code>false</code> are generally based off of C!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">char</span><span class="o">*</span> <span class="nf">nameFor</span><span class="p">(</span><span class="kt">char</span> <span class="n">marker</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">marker</span> <span class="o">==</span> <span class="n">X</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;X&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">marker</span> <span class="o">==</span> <span class="n">O</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;O&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">marker</span> <span class="o">==</span> <span class="n">BLANK</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;blank&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;???&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">userInput</span><span class="p">(</span><span class="kt">char</span> <span class="n">marker</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// C does not have a boolean type, so we&#39;ll use a char with 0 and 1</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">played</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// until they have picked a valid spot</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="n">played</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">// we&#39;re going to tell the players whose move it is</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s, it&#39;s your move.</span><span class="se">\n\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">nameFor</span><span class="p">(</span><span class="n">marker</span><span class="p">));</span>
</span><span class='line'>        <span class="c1">// show them the board</span>
</span><span class='line'>        <span class="n">displayBoard</span><span class="p">();</span>
</span><span class='line'>        <span class="c1">// and ask them where the want to go.</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">I&#39;ll take spot: &quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// we subtract by &#39;0&#39; to get the integral value</span>
</span><span class='line'>        <span class="c1">// we then remove one because our index starts at 0</span>
</span><span class='line'>        <span class="kt">char</span> <span class="n">spot</span> <span class="o">=</span> <span class="n">getchar</span><span class="p">()</span> <span class="o">-</span> <span class="sc">&#39;0&#39;</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="c1">// because there are three spots in a row and we&#39;re</span>
</span><span class='line'>        <span class="c1">// starting at zero (so 3rd spot is (2/3) = 0) we</span>
</span><span class='line'>        <span class="c1">// can simply divide by 3 to get the x coordinate.</span>
</span><span class='line'>        <span class="kt">char</span> <span class="n">x</span> <span class="o">=</span> <span class="p">(</span><span class="n">spot</span> <span class="o">/</span> <span class="mi">3</span><span class="p">);</span>
</span><span class='line'>        <span class="c1">// the y coordinate is going to be the remainder of</span>
</span><span class='line'>        <span class="c1">// spots not used in the x coordinate. So we&#39;ll use</span>
</span><span class='line'>        <span class="c1">// the modulas operator to give us the remainder.</span>
</span><span class='line'>        <span class="kt">char</span> <span class="n">y</span> <span class="o">=</span> <span class="p">(</span><span class="n">spot</span> <span class="o">%</span> <span class="mi">3</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// getchar() gives you one character at a time.</span>
</span><span class='line'>        <span class="c1">// so 123 whould need to use getchar() three times.</span>
</span><span class='line'>        <span class="c1">// however, when the user selects a spot they type</span>
</span><span class='line'>        <span class="c1">// in &quot;1\n&quot; so we need to clear the upto the \n</span>
</span><span class='line'>        <span class="c1">// so we don&#39;t get it in the next userInput()</span>
</span><span class='line'>        <span class="kt">char</span> <span class="n">last</span> <span class="o">=</span> <span class="n">getchar</span><span class="p">();</span>
</span><span class='line'>        <span class="k">while</span><span class="p">(</span><span class="n">last</span> <span class="o">!=</span> <span class="sc">&#39;\n&#39;</span><span class="p">)</span> <span class="c1">// until we reach the \n</span>
</span><span class='line'>            <span class="n">last</span> <span class="o">=</span> <span class="n">getchar</span><span class="p">();</span> <span class="c1">// load the next character</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// now, before we attempt to access the array, we need</span>
</span><span class='line'>        <span class="c1">// to make sure that the x and y coordinates are in an</span>
</span><span class='line'>        <span class="c1">// acceptable range, 0-3. Then before we make the move</span>
</span><span class='line'>        <span class="c1">// we need to make sure nothing is there. Otherwise</span>
</span><span class='line'>        <span class="c1">// it&#39;s an invalid move.</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">x</span> <span class="o">&lt;</span> <span class="mi">3</span> <span class="o">&amp;&amp;</span> <span class="n">x</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">y</span> <span class="o">&lt;</span> <span class="mi">3</span> <span class="o">&amp;&amp;</span> <span class="n">y</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">board</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">==</span> <span class="n">BLANK</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">board</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">=</span> <span class="n">marker</span><span class="p">;</span>
</span><span class='line'>            <span class="n">played</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// set to &quot;true&quot; to brake the loop</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">Invalid move, please try again.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">clearBoard</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// because we can&#39;t determine a winning or loosing game,</span>
</span><span class='line'>    <span class="c1">// we don&#39;t want to have to have a loop yet.</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">player</span> <span class="o">=</span> <span class="n">X</span><span class="p">;</span>
</span><span class='line'>    <span class="n">userInput</span><span class="p">(</span><span class="n">player</span><span class="p">);</span>
</span><span class='line'>    <span class="n">player</span> <span class="o">=</span> <span class="p">(</span><span class="n">player</span> <span class="o">==</span> <span class="n">X</span><span class="p">)</span> <span class="o">?</span> <span class="n">O</span> <span class="o">:</span> <span class="n">X</span><span class="p">;</span>
</span><span class='line'>    <span class="n">userInput</span><span class="p">(</span><span class="n">player</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">displayBoard</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Determining the Winner</h2>

<p>In order to win tic-tac-toe, you must get three of your &#8220;marker&#8221; in a row. If we take a look at the board, there are a few ways to do this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="nl">Column:</span>      <span class="nl">Row:</span>          <span class="nl">Diagonal:</span>
</span><span class='line'> <span class="mi">1</span> <span class="o">|</span> <span class="mi">2</span> <span class="o">|</span> <span class="n">X</span>     <span class="n">X</span> <span class="o">|</span> <span class="n">X</span> <span class="o">|</span> <span class="n">X</span>     <span class="n">X</span> <span class="o">|</span> <span class="mi">2</span> <span class="o">|</span> <span class="mi">3</span>
</span><span class='line'> <span class="o">--+---+--</span>     <span class="o">--+---+--</span>     <span class="o">--+---+--</span>
</span><span class='line'> <span class="mi">4</span> <span class="o">|</span> <span class="mi">5</span> <span class="o">|</span> <span class="n">X</span>     <span class="mi">4</span> <span class="o">|</span> <span class="mi">5</span> <span class="o">|</span> <span class="mi">6</span>     <span class="mi">4</span> <span class="o">|</span> <span class="n">X</span> <span class="o">|</span> <span class="mi">6</span>
</span><span class='line'> <span class="o">--+---+--</span>     <span class="o">--+---+--</span>     <span class="o">--+---+--</span>
</span><span class='line'> <span class="mi">7</span> <span class="o">|</span> <span class="mi">8</span> <span class="o">|</span> <span class="n">X</span>     <span class="mi">7</span> <span class="o">|</span> <span class="mi">8</span> <span class="o">|</span> <span class="mi">9</span>     <span class="mi">7</span> <span class="o">|</span> <span class="mi">8</span> <span class="o">|</span> <span class="n">X</span>
</span></code></pre></td></tr></table></div></figure>


<p>For the columns we can just &#8220;scan&#8221; them from left to right. We&#8217;ll check to see if one of them isn&#8217;t blank and if it isn&#8217;t blank, if the other items in that row match it. If they do, that&#8217;s an entire row of the same thing, so that thing wins. We can apply this to row as well. For diagonal we can use the same logic, but we can&#8217;t &#8220;scan&#8221; it easily so we&#8217;ll just write both diagonal conditions out by hand. We&#8217;ll return &#8221;<code>false</code>&#8221;, <code>0</code>, when we don&#8217;t find anything. And if the board is all used up (there are no blank spots) we&#8217;ll return that it&#8217;s a <code>TIE</code> (make sure to add <code>#define TIE 1</code> to the top of your source).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">char</span> <span class="nf">winner</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// first lets check the rows of the board, left to right</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="c1">// if the first one isn&#39;t blank and all of them are</span>
</span><span class='line'>        <span class="c1">// the same marker</span>
</span><span class='line'>        <span class="k">if</span><span class="p">((</span><span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">!=</span> <span class="n">BLANK</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">])</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">2</span><span class="p">]))</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">];</span> <span class="c1">// return the marker</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// now lets check the columns, top to bottom</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="c1">// we&#39;ll use the same strategy</span>
</span><span class='line'>        <span class="k">if</span><span class="p">((</span><span class="n">board</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="n">BLANK</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">board</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">board</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="n">i</span><span class="p">])</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">board</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">board</span><span class="p">[</span><span class="mi">2</span><span class="p">][</span><span class="n">i</span><span class="p">]))</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">board</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// now for the diagonals</span>
</span><span class='line'>    <span class="c1">// we&#39;ll start from top left to bottom right</span>
</span><span class='line'>    <span class="k">if</span><span class="p">((</span><span class="n">board</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">!=</span> <span class="n">BLANK</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">board</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">board</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">])</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">board</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="n">board</span><span class="p">[</span><span class="mi">2</span><span class="p">][</span><span class="mi">2</span><span class="p">]))</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">board</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// and bottom left to top right</span>
</span><span class='line'>    <span class="k">if</span><span class="p">((</span><span class="n">board</span><span class="p">[</span><span class="mi">2</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">!=</span> <span class="n">BLANK</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">board</span><span class="p">[</span><span class="mi">2</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">board</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">])</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">board</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="n">board</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">2</span><span class="p">]))</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">board</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// make sure we haven&#39;t used the entire board yet</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">char</span> <span class="n">j</span><span class="p">;</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">board</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">!=</span> <span class="n">BLANK</span><span class="p">)</span>
</span><span class='line'>                <span class="n">count</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">count</span> <span class="o">&gt;=</span> <span class="mi">9</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">TIE</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// if we haven&#39;t reached a winner yet, return 0 for &#39;false&#39;</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And now we have the ability to make a game loop! We want them to continue playing while there is no winner (or <code>TIE</code>) and swap which marker is playing. Once we have a winner, alert the players and let them see the final board.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">clearBoard</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">char</span> <span class="n">player</span> <span class="o">=</span> <span class="n">X</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">winner</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">userInput</span><span class="p">(</span><span class="n">player</span><span class="p">);</span>
</span><span class='line'>        <span class="n">player</span> <span class="o">=</span> <span class="p">(</span><span class="n">player</span> <span class="o">==</span> <span class="n">X</span><span class="p">)</span> <span class="o">?</span> <span class="n">O</span> <span class="o">:</span> <span class="n">X</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">char</span> <span class="n">result</span> <span class="o">=</span> <span class="n">winner</span><span class="p">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">result</span> <span class="o">==</span> <span class="n">TIE</span><span class="p">)</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Ouch, no winners here.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Congratulations %s, you&#39;re the winner!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">nameFor</span><span class="p">(</span><span class="n">result</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">displayBoard</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>What if they want to play again?</h3>

<p>It&#8217;s common practice to ask a player if they want to play again. For those cases when it becomes &#8220;best out of three&#8221; followed by &#8220;best out of five&#8221; and so on. So we&#8217;ll add a variable called <code>playing</code>, we&#8217;ll set it to <code>'y'</code> for yes, as if the player had chosen to play again. Then, after we show them the winning board, we&#8217;ll prompt them with <code>y/n</code>, although any non <code>'y'</code> will do,  if they want to play again. If they enter in anything except <code>'y'</code> it will break the game loop and exit the program. In order to get input from the user, we&#8217;re going to use <code>getchar()</code> again. But remember when we were getting them to play we had to clear the <code>\n</code> or any extra characters? We&#8217;ll have to do that again here. So why don&#8217;t we <strong>cut</strong> and paste that code into a function and call it there instead as well as here.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">void</span> <span class="nf">clearGetChar</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// getchar() gives you one character at a time.</span>
</span><span class='line'>    <span class="c1">// so 123 whould need to use getchar() three times.</span>
</span><span class='line'>    <span class="c1">// however, when the user selects a spot they type</span>
</span><span class='line'>    <span class="c1">// in &quot;1\n&quot; so we need to clear the upto the \n</span>
</span><span class='line'>    <span class="c1">// so we don&#39;t get it in the next userInput()</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">last</span> <span class="o">=</span> <span class="n">getchar</span><span class="p">();</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="n">last</span> <span class="o">!=</span> <span class="sc">&#39;\n&#39;</span><span class="p">)</span> <span class="c1">// until we reach the \n</span>
</span><span class='line'>        <span class="n">last</span> <span class="o">=</span> <span class="n">getchar</span><span class="p">();</span> <span class="c1">// load the next character</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">playing</span> <span class="o">=</span> <span class="sc">&#39;y&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">player</span> <span class="o">=</span> <span class="n">X</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="n">playing</span> <span class="o">==</span> <span class="sc">&#39;y&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">clearBoard</span><span class="p">();</span> <span class="c1">// ensure the board is BLANK</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">while</span><span class="p">(</span><span class="n">winner</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="c1">// while there isn&#39;t a winner</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">userInput</span><span class="p">(</span><span class="n">player</span><span class="p">);</span> <span class="c1">// ask a player to play</span>
</span><span class='line'>            <span class="n">player</span> <span class="o">=</span> <span class="p">(</span><span class="n">player</span> <span class="o">==</span> <span class="n">X</span><span class="p">)</span> <span class="o">?</span> <span class="n">O</span> <span class="o">:</span> <span class="n">X</span><span class="p">;</span> <span class="c1">// switch players</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">char</span> <span class="n">result</span> <span class="o">=</span> <span class="n">winner</span><span class="p">();</span> <span class="c1">// get the winner</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">result</span> <span class="o">==</span> <span class="n">TIE</span><span class="p">)</span> <span class="c1">// if the winner was &quot;TIE&quot;</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Ouch, no winners here.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">else</span> <span class="c1">// X or O won</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Congratulations %s, you&#39;re the winner!</span><span class="se">\n\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">nameFor</span><span class="p">(</span><span class="n">result</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">displayBoard</span><span class="p">();</span> <span class="c1">// show them their board</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Want to play again? (y/n) &quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">playing</span> <span class="o">=</span> <span class="n">getchar</span><span class="p">();</span> <span class="c1">// we&#39;re looping on this being &#39;y&#39; so anything else quits</span>
</span><span class='line'>        <span class="n">clearGetChar</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can download <a href="http://mohammad.el-abid.com//downloads/2012-08-24-c-beauty-in-everything-part-1/main.c">my code here</a>.</p>

<h2>What&#8217;s next?</h2>

<p>In the next part we&#8217;ll introduce two modes, a single player (against an A.I.) and the multiplayer version we developed here. We&#8217;ll also try to make it more friendly on the command line by using <a href="http://www.gnu.org/software/ncurses/">ncurses</a> and color. Maybe even introduce a menu system!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Eid Mubarak!]]></title>
    <link href="http://mohammad.el-abid.com//blog/2012/08/18/eid-mubarak/"/>
    <updated>2012-08-18T14:30:00-04:00</updated>
    <id>http://mohammad.el-abid.com//blog/2012/08/18/eid-mubarak</id>
    <content type="html"><![CDATA[<p>To those that are ending Eid tomorrow, you can come back tomorrow! <strong>Since I&#8217;m here,</strong> why don&#8217;t I tell you about the post I plan on releasing next Friday? At the bottom is the output of the current program, though it might change a bit. It&#8217;s built in C and only uses the standard io and standard library. It will be a multipart series, with the first part, at least, covering the code to generate the output below. In future parts (or part) (hopefully the Friday after, maybe I&#8217;ll break the schedule and release it early), I&#8217;ll cover A.I. and making a pretty display in the terminal. The post will assume you know how to program and know C-style syntax (Java or JavaScript use C-style syntax). I&#8217;ll also throw in a few links to articles about setting up a C IDE.</p>

<p>I&#8217;ll <strong>C</strong> you later, output after the break.</p>

<!-- more -->




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Player X, it's your move.
</span><span class='line'>
</span><span class='line'>1 | 2 | 3
</span><span class='line'>--+---+--
</span><span class='line'>4 | 5 | 6
</span><span class='line'>--+---+--
</span><span class='line'>7 | 8 | 9
</span><span class='line'>
</span><span class='line'>I'll take spot: 1
</span><span class='line'>Player O, it's your move.
</span><span class='line'>
</span><span class='line'>X | 2 | 3
</span><span class='line'>--+---+--
</span><span class='line'>4 | 5 | 6
</span><span class='line'>--+---+--
</span><span class='line'>7 | 8 | 9
</span><span class='line'>
</span><span class='line'>I'll take spot: 2
</span><span class='line'>Player X, it's your move.
</span><span class='line'>
</span><span class='line'>X | O | 3
</span><span class='line'>--+---+--
</span><span class='line'>4 | 5 | 6
</span><span class='line'>--+---+--
</span><span class='line'>7 | 8 | 9
</span><span class='line'>
</span><span class='line'>I'll take spot: 5
</span><span class='line'>Player O, it's your move.
</span><span class='line'>
</span><span class='line'>X | O | 3
</span><span class='line'>--+---+--
</span><span class='line'>4 | X | 6
</span><span class='line'>--+---+--
</span><span class='line'>7 | 8 | 9
</span><span class='line'>
</span><span class='line'>I'll take spot: 6
</span><span class='line'>Player X, it's your move.
</span><span class='line'>
</span><span class='line'>X | O | 3
</span><span class='line'>--+---+--
</span><span class='line'>4 | X | O
</span><span class='line'>--+---+--
</span><span class='line'>7 | 8 | 9
</span><span class='line'>
</span><span class='line'>I'll take spot: 9
</span><span class='line'>X | O | 3
</span><span class='line'>--+---+--
</span><span class='line'>4 | X | O
</span><span class='line'>--+---+--
</span><span class='line'>7 | 8 | X
</span><span class='line'>
</span><span class='line'>WE HAVE A WINNER!
</span><span class='line'>Congratulations Player X!
</span><span class='line'>Do you want to play again? (y/n) n</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://mohammad.el-abid.com//blog/2012/08/17/hello-world/"/>
    <updated>2012-08-17T13:06:00-04:00</updated>
    <id>http://mohammad.el-abid.com//blog/2012/08/17/hello-world</id>
    <content type="html"><![CDATA[<p>My name&#8217;s Mohammad El-Abid. I&#8217;ve been working with the web since before I can remember. I love writing about technology, games, and animation. Hopefully this will be a blog of high quality posts updated when I&#8217;m not flooded with school work (<a href="http://bridgeport.edu/">University of Bridgeport</a> 2015) or working with my <a href="http://mohammad.el-abid.com//resume">clients</a>.</p>

<h3>Technology</h3>

<p>I currently work as a Ruby on Rails senior developer. But teach in Java, learn C++ at school, use Node.JS for personal projects, C for small/easy utilities, and basic for robotics. I&#8217;ll be talking about issues and patterns I run into and how I fixed the problem. I&#8217;ll probably talk about what I see when I&#8217;m teaching, common mistakes, clever ideas, and such. Every now my technology posts might get blurred with gaming. The <a href="http://www.kickstarter.com/projects/1523379957/oculus-rift-step-into-the-game">Rift</a> looks amazing.</p>

<h3>Animation</h3>

<p>Thanks to <a href="http://students.autodesk.com">Autodesk&#8217;s educational site</a>, I&#8217;m learning Maya 2013 to replace <a href="http://hash.com/">Animation:Master</a>. I&#8217;m hoping to use my modeling skills to create some basic objects for a game. The game doesn&#8217;t have any specifics, just something I think every programmer wants to do. Game makers are like the rockstars of programmers.</p>

<h3>Games</h3>

<p>I&#8217;ll be playing a bit of <a href="http://guildwars2.com/">Guild Wars 2</a> during school. It will be my first MMORPG. I also play games like Super Meat Boy, DiRT 3 or Showdown, and Tekken. Don&#8217;t expect too much on games or math crunching posts, I&#8217;m not a very good gamer, just someone that enjoys games.</p>
]]></content>
  </entry>
  
</feed>
